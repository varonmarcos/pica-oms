package com.mycompany.sp.definitions;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.7.6
 * 2013-11-10T01:47:01.924-05:00
 * Generated source version: 2.7.6
 * 
 */
@WebServiceClient(name = "Customer", 
                  wsdlLocation = "http://localhost:8081/CustomerWS/services/customerServicePort?wsdl",
                  targetNamespace = "http://mycompany.com/sp/definitions") 
public class Customer extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://mycompany.com/sp/definitions", "Customer");
    public final static QName CustomerServicePort = new QName("http://mycompany.com/sp/definitions", "customerServicePort");
    static {
        URL url = null;
        try {
            url = new URL("http://localhost:8081/CustomerWS/services/customerServicePort?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(Customer.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://localhost:8081/CustomerWS/services/customerServicePort?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public Customer(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public Customer(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Customer() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns CustomerBinding
     */
    @WebEndpoint(name = "customerServicePort")
    public CustomerBinding getCustomerServicePort() {
        return super.getPort(CustomerServicePort, CustomerBinding.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns CustomerBinding
     */
    @WebEndpoint(name = "customerServicePort")
    public CustomerBinding getCustomerServicePort(WebServiceFeature... features) {
        return super.getPort(CustomerServicePort, CustomerBinding.class, features);
    }

}
